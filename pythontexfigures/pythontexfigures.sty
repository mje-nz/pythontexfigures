\ProvidesPackage{pythontexfigures}

% TODO: require pythontex, pgf, and currfile-abspath?

% Set up package options
\RequirePackage{kvoptions}
\SetupKeyvalOptions{family=pytxf,prefix=pytxf@}
% Look for figure scripts relative to the current file, not the current working
% directory.
\DeclareBoolOption{relative}
% Base matplotlib font size -- one of normalsize, small, footnotesize, scriptsize
% (without a leading backslash!)
\DeclareStringOption[footnotesize]{fontsize}
\ProcessKeyvalOptions*

% If the 'relative' option is specified, pass the current file's path into Python
\ifpytxf@relative
    \RequirePackage[abspath]{currfile}
    \newcommand{\pytxf@currdir}{\currfileabsdir}
\else
    \newcommand{\pytxf@currdir}{}
\fi

% Look for figure scripts in a folder or subfolder.  If the 'relative' option is
% specified, this must be a relative path (and will be relative to the file being
% processed).
\def\pythontexfigurespath#1{\def\pytxf@scriptpath{#1}}
\ifx \pytxf@scriptpath \@undefined
    \def\pytxf@scriptpath{}
\fi


% Calculate font size string to pass into Python
% (size saving from https://tex.stackexchange.com/a/423216 )
\newcommand{\pytxf@setfsize}[1]{{#1\xdef\pytxf@fsize{\f@size}}}
\RequirePackage{pdftexcmds}
\ifnum\pdf@strcmp{\pytxf@fontsize}{normalsize}=0 %
    \pytxf@setfsize{\normalsize}
\fi
\ifnum\pdf@strcmp{\pytxf@fontsize}{small}=0 %
    \pytxf@setfsize{\small}
\fi
\ifnum\pdf@strcmp{\pytxf@fontsize}{footnotesize}=0 %
    \pytxf@setfsize{\footnotesize}
\fi
\ifnum\pdf@strcmp{\pytxf@fontsize}{scriptsize}=0 %
    \pytxf@setfsize{\scriptsize}
\fi
\@ifundefined{pytxf@fsize}{\def\pytxf@fsize{\pytxf@fontsize}}{}


% Until there's a new (> 0.16) release of PythonTeX, patch issue #65
% https://github.com/gpoore/pythontex/issues/65
\@ifpackagelater{pythontex}{2019/07/20}{}{%
    % Pass context into customcode environment
    \renewenvironment{pythontexcustomcode}[2][begin]{%
        \VerbatimEnvironment
        \Depythontex{env:pythontexcustomcode:om:n}%
        %! Suppress = NonMatchingIf
        \ifstrequal{#1}{begin}{}{%
            \ifstrequal{#1}{end}{}{\PackageError{\pytx@packagename}%
                {Invalid optional argument for pythontexcustomcode}{}
            }%
        }%
        \xdef\pytx@type{CC:#2:#1}%
        \edef\pytx@cmd{code}%
        % PATCH \def\pytx@context{}%
        \pytx@SetContext
        % END PATCH
        \def\pytx@group{none}%
        \pytx@BeginCodeEnv[none]}%
    {\end{VerbatimOut}%
        \setcounter{FancyVerbLine}{\value{pytx@FancyVerbLineTemp}}%
        \stepcounter{\pytx@counter}%
    }
}

% Handle unicode minus character from matplotlib
\DeclareUnicodeCharacter{2212}{-}


% Pass font size, text width, script path, current directory (if relative option
% enabled), and PythonTeX output dir into scripts.
\setpythontexcontext{%
    fontsize=\pytxf@fsize,%
    textwidth=\the\textwidth,%
    scriptpath=\pytxf@scriptpath,%
    currdir=\pytxf@currdir,%
    outputdir=\pytx@outputdir%
}

% Import Python module and set up matplotlib
\begin{pythontexcustomcode}{py}
import pythontexfigures
ptf = pythontexfigures.setup(pytex)
\end{pythontexcustomcode}

% Shorthand for inserting figures from Python scripts
\newcommand*{\pyfig}[1]{\centering\py{ptf.figure(#1)}}
